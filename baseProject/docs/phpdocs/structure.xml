<?xml version="1.0" encoding="utf-8"?>
<project version="2.0.0a12" title="">
  <file path="baseProject/AbstractRoutesTable.php" hash="b623ddef3fb9ad51fd80401e24700c7d" package="Default">
    <docblock line="2">
      <description>The AbstractRoutesTable class defines a base class for defining a Routes Table for an application.</description>
      <long-description>&lt;p&gt;Implement
the three required methods, "getStaticRoutes", "getDynamicRoutes", and "getAlwaysSupportRoute".&lt;/p&gt;</long-description>
    </docblock>
    <class final="false" abstract="true" namespace="baseProject" line="16" package="Default">
      <extends/>
      <name>AbstractRoutesTable</name>
      <full_name>\baseProject\AbstractRoutesTable</full_name>
      <docblock line="12">
        <description>This class defines the basics for a route table.</description>
        <long-description></long-description>
        <tag line="12" name="abstract" description=""/>
      </docblock>
      <property final="false" static="true" visibility="private" line="21" namespace="baseProject" package="Default">
        <name>$activeRoutesTable</name>
        <default></default>
        <docblock line="17">
          <description>An instance of the routes table currently used by the application</description>
          <long-description></long-description>
          <tag line="17" name="var" description="" type="\baseProject\AbstractRoutesTable">
            <type by_reference="false">\baseProject\AbstractRoutesTable</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="private" line="27" namespace="baseProject" package="Default">
        <name>$urlCache</name>
        <default>null</default>
        <docblock line="23">
          <description>An internal cache of URLs mapped to their delegates for getting URLs via this routes table</description>
          <long-description></long-description>
          <tag line="23" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" namespace="baseProject" line="33" package="Default">
        <name>SetActiveRoutesTable</name>
        <full_name>SetActiveRoutesTable</full_name>
        <docblock line="29">
          <description>Set the active routes table.</description>
          <long-description>&lt;p&gt;This is used internally from the Dispatcher.&lt;/p&gt;</long-description>
          <tag line="29" name="param" description="an instance of this class" type="\baseProject\AbstractRoutesTable" variable="$routesTable">
            <type by_reference="false">\baseProject\AbstractRoutesTable</type>
          </tag>
        </docblock>
        <argument line="33">
          <name>$routesTable</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="baseProject" line="42" package="Default">
        <name>Url</name>
        <full_name>Url</full_name>
        <docblock line="37">
          <description>Call GetUrl and then echo it.</description>
          <long-description></long-description>
          <tag line="37" name="internal" description="param string $url the delegate method name from the routes table"/>
          <tag line="37" name="internal" description="param mixed $args any url arguments"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="baseProject" line="51" package="Default">
        <name>GetUrl</name>
        <full_name>GetUrl</full_name>
        <docblock line="46">
          <description>Get the url from the url =&gt; delegate mapping in the routes table.</description>
          <long-description></long-description>
          <tag line="46" name="param" description="string the name of a delegate from the routes table to get the url of" type="\baseProject\" variable="$delegate"/>
          <tag line="46" name="return" description="the url of the delegate passed" type="string|null">
            <type by_reference="false">string</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
        <argument line="51">
          <name>$delegate</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="baseProject" line="82" package="Default">
        <name>initUrlCache</name>
        <full_name>initUrlCache</full_name>
        <docblock line="79">
          <description>Creates a local cache of the delegate to URL lookup.</description>
          <long-description></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="baseProject" line="92" package="Default">
        <name>RedirectToUnsupportedBrowser</name>
        <full_name>RedirectToUnsupportedBrowser</full_name>
        <docblock line="89">
          <description>Method handler to redirect to the unsupported browser page.</description>
          <long-description></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="baseProject" line="100" package="Default">
        <name>UnsupportedBrowser</name>
        <full_name>UnsupportedBrowser</full_name>
        <docblock line="97">
          <description>Show the unsupported browser page</description>
          <long-description></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="baseProject" line="109" package="Default">
        <name>AccessDenied403</name>
        <full_name>AccessDenied403</full_name>
        <docblock line="105">
          <description>Access Denied (403) error page</description>
          <long-description></long-description>
          <tag line="105" name="param" description="an exception to be logged" type="\Exception" variable="$e">
            <type by_reference="false">\Exception</type>
          </tag>
        </docblock>
        <argument line="109">
          <name>$e</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="baseProject" line="118" package="Default">
        <name>FileNotFound404</name>
        <full_name>FileNotFound404</full_name>
        <docblock line="114">
          <description>File Not Found (404) error page</description>
          <long-description></long-description>
          <tag line="114" name="param" description="an exception to be logged" type="\Exception" variable="$e">
            <type by_reference="false">\Exception</type>
          </tag>
        </docblock>
        <argument line="118">
          <name>$e</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="baseProject" line="127" package="Default">
        <name>Gone410</name>
        <full_name>Gone410</full_name>
        <docblock line="123">
          <description>Gone (410) error page</description>
          <long-description></long-description>
          <tag line="123" name="param" description="an exception to be logged" type="\Exception" variable="$e">
            <type by_reference="false">\Exception</type>
          </tag>
        </docblock>
        <argument line="127">
          <name>$e</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="baseProject" line="136" package="Default">
        <name>InternalServerError500</name>
        <full_name>InternalServerError500</full_name>
        <docblock line="132">
          <description>Internal Server Error (500) error page</description>
          <long-description></long-description>
          <tag line="132" name="param" description="an exception to be logged" type="\Exception" variable="$e">
            <type by_reference="false">\Exception</type>
          </tag>
        </docblock>
        <argument line="136">
          <name>$e</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="baseProject" line="145" package="Default">
        <name>redirect</name>
        <full_name>redirect</full_name>
        <docblock line="141">
          <description>Redirect to a new page</description>
          <long-description></long-description>
          <tag line="141" name="param" description="the url to redirect to" type="string" variable="$url">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="145">
          <name>$url</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="baseProject" line="154" package="Default">
        <name>getStaticRoutes</name>
        <full_name>getStaticRoutes</full_name>
        <docblock line="150">
          <description>Return an array of static urls</description>
          <long-description></long-description>
          <tag line="150" name="return" description="url as the key, delegate function name as the value" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="baseProject" line="160" package="Default">
        <name>getDynamicRoutes</name>
        <full_name>getDynamicRoutes</full_name>
        <docblock line="156">
          <description>Return an array of dynamic urls.</description>
          <long-description>&lt;p&gt;Use a * to represent a parameter, e.g. /my/page/*&lt;/p&gt;</long-description>
          <tag line="156" name="return" description="url as the key, delegate function name as the value" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="baseProject" line="166" package="Default">
        <name>getAlwaysSupportRoute</name>
        <full_name>getAlwaysSupportRoute</full_name>
        <docblock line="162">
          <description>An array of urls that the system should ignore browser support rules on.</description>
          <long-description></long-description>
          <tag line="162" name="return" description="urls that should always be supported" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="baseProject/BootStrapper.php" hash="3ad31f2a717fc0f46a7810e01fed1282" package="Default">
    <docblock line="2">
      <description>A base class for setting up the environment when the application starts.</description>
      <long-description></long-description>
    </docblock>
    <include line="54" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="83" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="181" type="Require Once" package="Default">
      <name>Savant3.php</name>
    </include>
    <include line="182" type="Require Once" package="Default">
      <name>Propel.php</name>
    </include>
    <class final="false" abstract="true" namespace="global" line="11" package="Default">
      <extends/>
      <name>BootStrapper</name>
      <full_name>\BootStrapper</full_name>
      <docblock line="5">
        <description>Responsible for taking the request and setting anything related to the environment so that the rest of the
application can run.</description>
        <long-description>&lt;p&gt;For example, it will set include paths to make including scripts else where easier and
then dispatch the request. It should not handing anything more.&lt;/p&gt;</long-description>
        <tag line="5" name="abstract" description=""/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="16" namespace="global" package="Default">
        <name>$routesTable</name>
        <default>null</default>
        <docblock line="12">
          <description>The namespace of the routes table to be used.</description>
          <long-description></long-description>
          <tag line="12" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="23" namespace="global" package="Default">
        <name>$rewriteRules</name>
        <default>null</default>
        <docblock line="18">
          <description>An array of regex's to URLs to redirect to.</description>
          <long-description>&lt;p&gt;The key would be the regex (matching allowed) with the
value being the url, use $1, $2 as the values of the groups.&lt;/p&gt;</long-description>
          <tag line="18" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="29" namespace="global" package="Default">
        <name>$configurationFiles</name>
        <default>null</default>
        <docblock line="25">
          <description>An array of strings that represent files located in the /config folder that should be loaded upon app start.</description>
          <long-description></long-description>
          <tag line="25" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="34" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="31">
          <description>On create, set the paths accordingly.</description>
          <long-description></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="global" line="48" package="Default">
        <name>loadConfiguration</name>
        <full_name>loadConfiguration</full_name>
        <docblock line="44">
          <description>Load any of the configuration files specified.</description>
          <long-description></long-description>
          <tag line="44" name="throws" description="" type="\Exception">
            <type by_reference="false">\Exception</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="65" package="Default">
        <name>setPaths</name>
        <full_name>setPaths</full_name>
        <docblock line="62">
          <description>Initial paths to set.</description>
          <long-description></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="79" package="Default">
        <name>ResolveNamespace</name>
        <full_name>ResolveNamespace</full_name>
        <docblock line="73">
          <description>PHP requires to define how to load files dynamically.</description>
          <long-description>&lt;p&gt;This will resolve all classes located in the "classes"
folder with pathing for the namespace. Each class name must match the name of the file.&lt;/p&gt;</long-description>
          <tag line="73" name="param" description="the full namespace and class name to load" type="string" variable="$className">
            <type by_reference="false">string</type>
          </tag>
          <tag line="73" name="return" description="whether or not the namespace was resolved" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="79">
          <name>$className</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="93" package="Default">
        <name>ensurePrimaryDomain</name>
        <full_name>ensurePrimaryDomain</full_name>
        <docblock line="90">
          <description>Check to see if we are on the domain set in the config, if not redirect to it.</description>
          <long-description></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="110" package="Default">
        <name>enableHtmlCompression</name>
        <full_name>enableHtmlCompression</full_name>
        <docblock line="107">
          <description>EXPERIMENTAL - Minify the HTML.</description>
          <long-description></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="119" package="Default">
        <name>CompressHtml</name>
        <full_name>CompressHtml</full_name>
        <docblock line="114">
          <description>EXPERIMENTAL - Handler for ob_start (used for HTML minification).</description>
          <long-description></long-description>
          <tag line="114" name="param" description="" type="\" variable="$buffer"/>
          <tag line="114" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="119">
          <name>$buffer</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="141" package="Default">
        <name>addPath</name>
        <full_name>addPath</full_name>
        <docblock line="137">
          <description>Add a new include path into PHP.</description>
          <long-description></long-description>
          <tag line="137" name="param" description="the new path to add" type="string" variable="$newPath">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="141">
          <name>$newPath</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="148" package="Default">
        <name>handleRequest</name>
        <full_name>handleRequest</full_name>
        <docblock line="145">
          <description>Once the environment has been set, we can create a new dispatcher and begin processing the actual request.</description>
          <long-description></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="global" line="158" package="Default">
        <name>applyRewrite</name>
        <full_name>applyRewrite</full_name>
        <docblock line="155">
          <description>Apply any rewrites defined within the bootstrapper.</description>
          <long-description></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="180" package="Default">
        <name>includeDependencies</name>
        <full_name>includeDependencies</full_name>
        <docblock line="177">
          <description>Include any dependencies.</description>
          <long-description></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="190" package="Default">
        <name>initPropel</name>
        <full_name>initPropel</full_name>
        <docblock line="186">
          <description>Propel is a PHP ORM framework.</description>
          <long-description>&lt;p&gt;We initialize at the top so the entire project can handle any class it provided.&lt;/p&gt;</long-description>
          <tag line="186" name="param" description="a configuration path for Propel" type="string" variable="$modelConfig">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="190">
          <name>$modelConfig</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="baseProject/Controllers/BaseController.php" hash="d72e1049dfc985de15f8aafc5b5bc85b" package="Default">
    <docblock line="2">
      <description>Base controller for baseProject.</description>
      <long-description></long-description>
    </docblock>
    <class final="false" abstract="false" namespace="baseProject\Controllers" line="12" package="Default">
      <extends/>
      <name>BaseController</name>
      <full_name>\baseProject\Controllers\BaseController</full_name>
      <docblock line="8">
        <description>This BaseController class provides various utility functions that are common for a controler.</description>
        <long-description>&lt;p&gt;Utility functions
exist for getting values from $_REQUEST, $_SESSION, and redirecting. This class is meant to be extended.&lt;/p&gt;</long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="baseProject\Controllers" line="17" package="Default">
        <name>redirect</name>
        <full_name>redirect</full_name>
        <docblock line="13">
          <description>Redirect the page to the passed URL.</description>
          <long-description>&lt;p&gt;Will stop execution.&lt;/p&gt;</long-description>
          <tag line="13" name="param" description="the url to redirect to" type="string" variable="$url">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="17">
          <name>$url</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="baseProject\Controllers" line="29" package="Default">
        <name>getValueFrom</name>
        <full_name>getValueFrom</full_name>
        <docblock line="22">
          <description>Get the value of $key from $search.</description>
          <long-description>&lt;p&gt;If there isn't anything, use $default.&lt;/p&gt;</long-description>
          <tag line="22" name="param" description="the key to lookup in $search" type="string" variable="$key">
            <type by_reference="false">string</type>
          </tag>
          <tag line="22" name="param" description="an array" type="string" variable="$search">
            <type by_reference="false">string</type>
          </tag>
          <tag line="22" name="param" description="any default value if its not in the search array" type="mixed|null" variable="$default">
            <type by_reference="false">mixed</type>
            <type by_reference="false">null</type>
          </tag>
          <tag line="22" name="return" description="the value of the $search[ $key ] or the default" type="null|string">
            <type by_reference="false">null</type>
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="29">
          <name>$key</name>
          <default></default>
          <type/>
        </argument>
        <argument line="29">
          <name>$search</name>
          <default></default>
          <type/>
        </argument>
        <argument line="29">
          <name>$default</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="baseProject\Controllers" line="43" package="Default">
        <name>getValueFromRequest</name>
        <full_name>getValueFromRequest</full_name>
        <docblock line="37">
          <description>Get a given key from the $_REQUEST array</description>
          <long-description></long-description>
          <tag line="37" name="param" description="the name on the form, the key to lookup in $_REQUEST" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="37" name="param" description="a default value" type="string" variable="$default">
            <type by_reference="false">string</type>
          </tag>
          <tag line="37" name="return" description="the value of $_REQUEST[$key] or the default" type="null|string">
            <type by_reference="false">null</type>
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="43">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="43">
          <name>$default</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="baseProject\Controllers" line="53" package="Default">
        <name>getValueFromSession</name>
        <full_name>getValueFromSession</full_name>
        <docblock line="47">
          <description>Get the value of $key from $_SESSION, if no value exists use $default</description>
          <long-description></long-description>
          <tag line="47" name="param" description="the name on the form, the key to lookup in $_SESSION" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="47" name="param" description="the default value if $key doesn't exist" type="string" variable="$default">
            <type by_reference="false">string</type>
          </tag>
          <tag line="47" name="return" description="" type="null|string">
            <type by_reference="false">null</type>
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="53">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="53">
          <name>$default</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="baseProject\Controllers" line="63" package="Default">
        <name>getDateFromRequest</name>
        <full_name>getDateFromRequest</full_name>
        <docblock line="57">
          <description>Get the date time passed in the request with the given key.</description>
          <long-description>&lt;p&gt;a time() will be returned. The form should
have the following full names - "$name-year", "$name-month", "$name-day".&lt;/p&gt;</long-description>
          <tag line="57" name="param" description="string the name on the form, the key to look for in $_REQUEST" type="\baseProject\Controllers\" variable="$name"/>
          <tag line="57" name="return" description="the timestamp from the request or null if its invalid" type="int|null">
            <type by_reference="false">int</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
        <argument line="63">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="baseProject\Controllers" line="79" package="Default">
        <name>getBooleanFromRequest</name>
        <full_name>getBooleanFromRequest</full_name>
        <docblock line="74">
          <description>Get the value of key from the request as a boolean.</description>
          <long-description></long-description>
          <tag line="74" name="param" description="the name on the form, the key to look for in $_REQUEST" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="74" name="return" description="whether or not the key says &quot;true&quot; in any valid way" type="bool|null">
            <type by_reference="false">bool</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
        <argument line="79">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="baseProject\Controllers" line="90" package="Default">
        <name>validateDateFromRequest</name>
        <full_name>validateDateFromRequest</full_name>
        <docblock line="85">
          <description>Check to see that the date/time being passed in the request is valid.</description>
          <long-description></long-description>
          <tag line="85" name="param" description="the name on the form, the key to look for in $_REQUEST" type="string" variable="$key">
            <type by_reference="false">string</type>
          </tag>
          <tag line="85" name="return" description="whether or not the date is valid from the request" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="90">
          <name>$key</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="baseProject/Controllers/BasePageController.php" hash="3a47602861ffd53483c685f335a0f831" package="Default">
    <docblock line="2">
      <description>The BasePageController provides the abiltiy to render pages.</description>
      <long-description>&lt;p&gt;This class also provides for SEO if the SEOManager::Show( $this-&gt;seo ); is used in the template.&lt;/p&gt;</long-description>
    </docblock>
    <class final="false" abstract="false" namespace="baseProject\Controllers" line="14" package="Default">
      <extends>\baseProject\Controllers\BaseController</extends>
      <name>BasePageController</name>
      <full_name>\baseProject\Controllers\BasePageController</full_name>
      <docblock line="11">
        <description>A wrapper base class for the template engine.</description>
        <long-description></long-description>
      </docblock>
      <property final="false" static="false" visibility="private" line="19" namespace="baseProject\Controllers" package="Default">
        <name>$templateEngine</name>
        <default>null</default>
        <docblock line="15">
          <description>Savant3, the template engine itself</description>
          <long-description></long-description>
          <tag line="15" name="var" description="" type="\Savant3">
            <type by_reference="false">\Savant3</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="26" namespace="baseProject\Controllers" package="Default">
        <name>$masterTemplate</name>
        <default>null</default>
        <docblock line="21">
          <description>The master template view name to use for this page.</description>
          <long-description>&lt;p&gt;Pages build outside in and any other templates will
render inside this one&lt;/p&gt;</long-description>
          <tag line="21" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="32" namespace="baseProject\Controllers" package="Default">
        <name>$attachedTemplates</name>
        <default>array()</default>
        <docblock line="28">
          <description>Any attached templates that will be rendered</description>
          <long-description></long-description>
          <tag line="28" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="38" namespace="baseProject\Controllers" package="Default">
        <name>$config</name>
        <default>array('template_path' =&gt; APP_VIEWS_PATH)</default>
        <docblock line="34">
          <description>Savant3 template engine configuration - http://phpsavant.com/api/Savant3/Savant3/Savant3.html#$__config</description>
          <long-description></long-description>
          <tag line="34" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="46" namespace="baseProject\Controllers" package="Default">
        <name>$seo</name>
        <default>null</default>
        <docblock line="42">
          <description>The SEO node from seo-meta.xml in config</description>
          <long-description></long-description>
          <tag line="42" name="var" description="" type="\SimpleXMLElement">
            <type by_reference="false">\SimpleXMLElement</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="baseProject\Controllers" line="52" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="48">
          <description>A base page is bound to a specific kind of master template</description>
          <long-description></long-description>
          <tag line="48" name="param" description="the master template for this page" type="string" variable="$masterTemplate">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="52">
          <name>$masterTemplate</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="baseProject\Controllers" line="67" package="Default">
        <name>attach</name>
        <full_name>attach</full_name>
        <docblock line="60">
          <description>This will take the given value and attach it to the template engine using the specified key.</description>
          <long-description>&lt;p&gt;If override is true, then the value will get completely overridden as apposed to just appended.&lt;/p&gt;</long-description>
          <tag line="60" name="param" description="the key to expose in Savant3" type="string" variable="$key">
            <type by_reference="false">string</type>
          </tag>
          <tag line="60" name="param" description="the value of the key" type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="60" name="param" description="whether or not to overwrite any previous value" type="bool" variable="$overwrite">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="67">
          <name>$key</name>
          <default></default>
          <type/>
        </argument>
        <argument line="67">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
        <argument line="67">
          <name>$overwrite</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="baseProject\Controllers" line="84" package="Default">
        <name>attachTemplate</name>
        <full_name>attachTemplate</full_name>
        <docblock line="79">
          <description>Attach a given template to a specific content key.</description>
          <long-description></long-description>
          <tag line="79" name="param" description="the name of a sub-template renderer" type="string" variable="$key">
            <type by_reference="false">string</type>
          </tag>
          <tag line="79" name="param" description="the template to attach" type="string" variable="$template">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="84">
          <name>$key</name>
          <default></default>
          <type/>
        </argument>
        <argument line="84">
          <name>$template</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="baseProject\Controllers" line="95" package="Default">
        <name>prerender</name>
        <full_name>prerender</full_name>
        <docblock line="92">
          <description>Runs before rendering a page.</description>
          <long-description>&lt;p&gt;Override as necessary to do anything before template rendering.&lt;/p&gt;</long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="baseProject\Controllers" line="101" package="Default">
        <name>render</name>
        <full_name>render</full_name>
        <docblock line="97">
          <description>Render the page with passed template and the base template.</description>
          <long-description></long-description>
          <tag line="97" name="param" description="the view to render with the base template (if any)" type="string|null" variable="$templateName">
            <type by_reference="false">string</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
        <argument line="101">
          <name>$templateName</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="baseProject\Controllers" line="118" package="Default">
        <name>renderTemplates</name>
        <full_name>renderTemplates</full_name>
        <docblock line="115">
          <description>Attach all the values from any sub templates.</description>
          <long-description></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="baseProject\Controllers" line="132" package="Default">
        <name>setSeoToken</name>
        <full_name>setSeoToken</full_name>
        <docblock line="127">
          <description>Set a token variable and and value to be replaced within the SEO data.</description>
          <long-description></long-description>
          <tag line="127" name="param" description="the token to replace" type="string" variable="$token">
            <type by_reference="false">string</type>
          </tag>
          <tag line="127" name="param" description="the value to replace" type="string" variable="$value">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="132">
          <name>$token</name>
          <default></default>
          <type/>
        </argument>
        <argument line="132">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="baseProject/Controllers/ErrorController.php" hash="ed5939014b344ad2e65f68e88315fa4f" package="Default">
    <docblock line="2">
      <description>A base error controller class part of baseProject.</description>
      <long-description>&lt;p&gt;The supported error codes are 403, 404, 410 and 500.&lt;/p&gt;</long-description>
    </docblock>
    <class final="false" abstract="false" namespace="baseProject\Controllers" line="13" package="Default">
      <extends>\baseProject\Controllers\BasePageController</extends>
      <name>ErrorController</name>
      <full_name>\baseProject\Controllers\ErrorController</full_name>
      <docblock line="9">
        <description>The ErrorController class is a BasePageController class, it takes an optional exception to log, and renders any
of the supported error codes.</description>
        <long-description></long-description>
      </docblock>
      <property final="false" static="false" visibility="private" line="18" namespace="baseProject\Controllers" package="Default">
        <name>$exception</name>
        <default>null</default>
        <docblock line="14">
          <description>An exception that was thrown (if any)</description>
          <long-description></long-description>
          <tag line="14" name="var" description="" type="\Exception|\baseProject\Exceptions\BaseException">
            <type by_reference="false">\Exception</type>
            <type by_reference="false">\baseProject\Exceptions\BaseException</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="baseProject\Controllers" line="24" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="20">
          <description>The passed exception will be logged.</description>
          <long-description></long-description>
          <tag line="20" name="param" description="" type="\baseProject\Exceptions\BaseException" variable="$e">
            <type by_reference="false">\baseProject\Exceptions\BaseException</type>
          </tag>
        </docblock>
        <argument line="24">
          <name>$e</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="baseProject\Controllers" line="34" package="Default">
        <name>render</name>
        <full_name>render</full_name>
        <docblock line="30">
          <description>Render the error, passing the proper error code will set the header, also log the exception.</description>
          <long-description></long-description>
          <tag line="30" name="param" description="" type="int|null" variable="$errorCode">
            <type by_reference="false">int</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
        <argument line="34">
          <name>$errorCode</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="baseProject/Dispatcher.php" hash="08a5dd8aa3b8c313d11290185e911fff" package="Default">
    <docblock line="2">
      <description>The dispatcher for baseProject</description>
      <long-description></long-description>
    </docblock>
    <class final="false" abstract="false" namespace="baseProject" line="17" package="Default">
      <extends/>
      <name>Dispatcher</name>
      <full_name>\baseProject\Dispatcher</full_name>
      <docblock line="12">
        <description>This class is internal to baseProject.</description>
        <long-description>&lt;p&gt;The dispatcher is responsible for taking a routes table and applying it. It will check the URL and call the
appropriate function inside the routes table. You probably want to create a new routes table.&lt;/p&gt;</long-description>
        <tag line="12" name="see" description="\baseProject\AbstractRoutesTable" refers="\baseProject\AbstractRoutesTable"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="22" namespace="baseProject" package="Default">
        <name>$routesTable</name>
        <default>null</default>
        <docblock line="18">
          <description>An instance of the routes table to route against</description>
          <long-description></long-description>
          <tag line="18" name="var" description="" type="\baseProject\AbstractRoutesTable">
            <type by_reference="false">\baseProject\AbstractRoutesTable</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="28" namespace="baseProject" package="Default">
        <name>$staticRoutes</name>
        <default>null</default>
        <docblock line="24">
          <description>Static routes array</description>
          <long-description></long-description>
          <tag line="24" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="34" namespace="baseProject" package="Default">
        <name>$dynamicRoutes</name>
        <default>null</default>
        <docblock line="30">
          <description>Dynamic routes array</description>
          <long-description></long-description>
          <tag line="30" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="40" namespace="baseProject" package="Default">
        <name>$alwaysSupportRoute</name>
        <default>null</default>
        <docblock line="36">
          <description>Always support these routes in an array</description>
          <long-description></long-description>
          <tag line="36" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="baseProject" line="46" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="42">
          <description>Create an instance of the routes table passed, and get all the routes from the table.</description>
          <long-description>&lt;p&gt;Also get the current path.&lt;/p&gt;</long-description>
          <tag line="42" name="param" description="the routes table to route against" type="string" variable="$routesTable">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="46">
          <name>$routesTable</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="baseProject" line="67" package="Default">
        <name>dispatch</name>
        <full_name>dispatch</full_name>
        <docblock line="58">
          <description>Begin the dispatcher.</description>
          <long-description>&lt;p&gt;Checks first to see if we should support the browser and then the route.&lt;/p&gt;</long-description>
          <tag line="58" name="return" description="whether or not the route was successful." type="bool">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="58" name="throws" description="file not found exception" type="\baseProject\Exceptions\Error404Exception">
            <type by_reference="false">\baseProject\Exceptions\Error404Exception</type>
          </tag>
          <tag line="58" name="throws" description="access denied exception" type="\baseProject\Exceptions\Error403Exception">
            <type by_reference="false">\baseProject\Exceptions\Error403Exception</type>
          </tag>
          <tag line="58" name="throws" description="gone exception" type="\baseProject\Exceptions\Error410Exception">
            <type by_reference="false">\baseProject\Exceptions\Error410Exception</type>
          </tag>
          <tag line="58" name="throws" description="internal server error exception" type="\baseProject\Exceptions\Error500Exception">
            <type by_reference="false">\baseProject\Exceptions\Error500Exception</type>
          </tag>
          <tag line="58" name="throws" description="any other internal exception may also be thrown" type="\Exception">
            <type by_reference="false">\Exception</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="baseProject" line="107" package="Default">
        <name>getPathName</name>
        <full_name>getPathName</full_name>
        <docblock line="103">
          <description>Get the current URL.</description>
          <long-description></long-description>
          <tag line="103" name="return" description="the current URL" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="baseProject" line="119" package="Default">
        <name>route</name>
        <full_name>route</full_name>
        <docblock line="115">
          <description>Apply the current URL to a route in the routes table.</description>
          <long-description>&lt;p&gt;This will call the specific method in the routes table.&lt;/p&gt;</long-description>
          <tag line="115" name="throws" description="delegate doesn't exist inside a URL." type="\baseProject\Exceptions\Error500Exception">
            <type by_reference="false">\baseProject\Exceptions\Error500Exception</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="baseProject" line="159" package="Default">
        <name>supportedBrowser</name>
        <full_name>supportedBrowser</full_name>
        <docblock line="155">
          <description>Check to see whether or not we should support specific browsers.</description>
          <long-description>&lt;p&gt;Currently only pushes IE6 and IE7.&lt;/p&gt;</long-description>
          <tag line="155" name="return" description="whether or not this browser is supported on this site." type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="baseProject/Exceptions/BaseException.php" hash="fd799c9e2c3536df301a9bd794490576" package="Default">
    <docblock line="2">
      <description>This base exception class supports an inner exception.</description>
      <long-description>&lt;p&gt;This is used to throw internal exceptions with in the app
so the application can show friendlier error messages.&lt;/p&gt;</long-description>
    </docblock>
    <class final="false" abstract="true" namespace="baseProject\Exceptions" line="12" package="Default">
      <extends>\Exception</extends>
      <name>BaseException</name>
      <full_name>\baseProject\Exceptions\BaseException</full_name>
      <docblock line="9">
        <description>A base exception class with an inner exception.</description>
        <long-description></long-description>
      </docblock>
      <property final="false" static="false" visibility="private" line="17" namespace="baseProject\Exceptions" package="Default">
        <name>$innerException</name>
        <default></default>
        <docblock line="13">
          <description>More details on the real exception that was thrown (if avilable)</description>
          <long-description></long-description>
          <tag line="13" name="var" description="" type="\Exception|null">
            <type by_reference="false">\Exception</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="baseProject\Exceptions" line="24" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="19">
          <description>Create the exception, save the inner exception separately.</description>
          <long-description></long-description>
          <tag line="19" name="param" description="a message stating what went wrong, additional tech details can be in the inner exception" type="string" variable="$msg">
            <type by_reference="false">string</type>
          </tag>
          <tag line="19" name="param" description="an inner exception that was thrown" type="\Exception|null" variable="$e">
            <type by_reference="false">\Exception</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
        <argument line="24">
          <name>$msg</name>
          <default></default>
          <type/>
        </argument>
        <argument line="24">
          <name>$e</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="baseProject\Exceptions" line="34" package="Default">
        <name>getInnerException</name>
        <full_name>getInnerException</full_name>
        <docblock line="30">
          <description>Get the inner exception.</description>
          <long-description></long-description>
          <tag line="30" name="return" description="an inner exception" type="\Exception|null">
            <type by_reference="false">\Exception</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="baseProject/Exceptions/Error403Exception.php" hash="33e6fae7c110ee5d7ab4c775082cfee2" package="Default">
    <docblock line="2">
      <description>403 Access Denied exception for baseProject.</description>
      <long-description></long-description>
    </docblock>
    <class final="false" abstract="false" namespace="baseProject\Exceptions" line="10" package="Default">
      <extends>\baseProject\Exceptions\BaseException</extends>
      <name>Error403Exception</name>
      <full_name>\baseProject\Exceptions\Error403Exception</full_name>
      <docblock line="7">
        <description>403 Exception class extends BaseException.</description>
        <long-description></long-description>
      </docblock>
    </class>
  </file>
  <file path="baseProject/Exceptions/Error404Exception.php" hash="eefb2b49d0523a789f2caa7a343d8e87" package="Default">
    <docblock line="2">
      <description>404 File Not Found exception for baseProject.</description>
      <long-description></long-description>
    </docblock>
    <class final="false" abstract="false" namespace="baseProject\Exceptions" line="10" package="Default">
      <extends>\baseProject\Exceptions\BaseException</extends>
      <name>Error404Exception</name>
      <full_name>\baseProject\Exceptions\Error404Exception</full_name>
      <docblock line="7">
        <description>404 Exception class extends BaseException.</description>
        <long-description></long-description>
      </docblock>
    </class>
  </file>
  <file path="baseProject/Exceptions/Error410Exception.php" hash="121ed1cb8f29cc9fb8bca513fc77655a" package="Default">
    <docblock line="2">
      <description>410 Gone exception for baseProject.</description>
      <long-description></long-description>
    </docblock>
    <class final="false" abstract="false" namespace="baseProject\Exceptions" line="10" package="Default">
      <extends>\baseProject\Exceptions\BaseException</extends>
      <name>Error410Exception</name>
      <full_name>\baseProject\Exceptions\Error410Exception</full_name>
      <docblock line="7">
        <description>410 Exception class extends BaseException</description>
        <long-description></long-description>
      </docblock>
    </class>
  </file>
  <file path="baseProject/Exceptions/Error500Exception.php" hash="fa56ec74907271ac59f2674c3a59caeb" package="Default">
    <docblock line="2">
      <description>500 Internal Server Error for baseProject.</description>
      <long-description></long-description>
    </docblock>
    <class final="false" abstract="false" namespace="baseProject\Exceptions" line="10" package="Default">
      <extends>\baseProject\Exceptions\BaseException</extends>
      <name>Error500Exception</name>
      <full_name>\baseProject\Exceptions\Error500Exception</full_name>
      <docblock line="7">
        <description>500 Exception class extends BaseException</description>
        <long-description></long-description>
      </docblock>
    </class>
  </file>
  <file path="baseProject/Helpers/HtmlHelper.php" hash="e854e94efb561d611ef580cca205aa80" package="Default">
    <docblock line="2">
      <description>Various HTML helpers to format text for HTML for baseProject.</description>
      <long-description></long-description>
    </docblock>
    <class final="false" abstract="false" namespace="baseProject\Helpers" line="11" package="Default">
      <extends/>
      <name>HtmlHelper</name>
      <full_name>\baseProject\Helpers\HtmlHelper</full_name>
      <docblock line="7">
        <description>HtmlHelper class support various methods for text encoding and text display based on the context of
the text, e.g.</description>
        <long-description>&lt;p&gt;urls, html encoding, etc.&lt;/p&gt;</long-description>
      </docblock>
      <method final="false" abstract="false" static="true" visibility="public" namespace="baseProject\Helpers" line="18" package="Default">
        <name>formatForHtml</name>
        <full_name>formatForHtml</full_name>
        <docblock line="13">
          <description>Encode the string for HTML, replaces new lines with br's too.</description>
          <long-description></long-description>
          <tag line="13" name="param" description="the string to transform" type="string" variable="$str">
            <type by_reference="false">string</type>
          </tag>
          <tag line="13" name="return" description="an html escaped string" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="18">
          <name>$str</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="baseProject/Managers/SEOManager.php" hash="6755d03d604be4c23f8d5f27d0c477ee" package="Default">
    <docblock line="2">
      <description>This static class that will parse the seo-meta.xml file located in the config folder and also display the
necessary HTML.</description>
      <long-description></long-description>
    </docblock>
    <class final="false" abstract="false" namespace="baseProject\Managers" line="15" package="Default">
      <extends/>
      <name>SEOManager</name>
      <full_name>\baseProject\Managers\SEOManager</full_name>
      <docblock line="10">
        <description>Handles any SEO related task for a page, use SEOManager::GetElement() and SEOManager::Show( $seoElement ) in
controller and view respectively.</description>
        <long-description>&lt;p&gt;Can also call setSeoToken( $token, $value )&lt;/p&gt;</long-description>
        <tag line="10" name="see" description="\baseProject\Controllers\BasePageController::setSeoToken()" refers="\baseProject\Controllers\BasePageController::setSeoToken()"/>
      </docblock>
      <method final="false" abstract="false" static="true" visibility="public" namespace="baseProject\Managers" line="20" package="Default">
        <name>GetElement</name>
        <full_name>GetElement</full_name>
        <docblock line="16">
          <description>Parse through the seo-meta.xml configuration file and get the relevant node for this page.</description>
          <long-description></long-description>
          <tag line="16" name="return" description="the SEO element for this page." type="null|\SimpleXMLElement">
            <type by_reference="false">null</type>
            <type by_reference="false">\SimpleXMLElement</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="baseProject\Managers" line="44" package="Default">
        <name>getPathName</name>
        <full_name>getPathName</full_name>
        <docblock line="40">
          <description>Get the current URL.</description>
          <long-description></long-description>
          <tag line="40" name="return" description="the current URL" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="baseProject\Managers" line="56" package="Default">
        <name>Show</name>
        <full_name>Show</full_name>
        <docblock line="52">
          <description>Set the title tag, all SEO meta tags, and open graph tags with the passed data.</description>
          <long-description></long-description>
          <tag line="52" name="param" description="" type="\baseProject\Managers\" variable="$seo"/>
        </docblock>
        <argument line="56">
          <name>$seo</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="baseProject\Managers" line="75" package="Default">
        <name>ShowSEODebug</name>
        <full_name>ShowSEODebug</full_name>
        <docblock line="70">
          <description>Show the meta data and open graph data on the page.</description>
          <long-description>&lt;p&gt;Useful for debugging and verifying the content is correct.
Must have APP_SHOW_SEO_DUMP enabled in config.&lt;/p&gt;</long-description>
          <tag line="70" name="param" description="the seo data" type="mixed" variable="$seo">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="75">
          <name>$seo</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="SampleBootStrapper.php" hash="3203c7dbb0086e5343b72c4f480cb177" package="Default">
    <include line="7" type="Require Once" package="Default">
      <name>baseProject/BootStrapper.php</name>
      <docblock line="2">
        <description>Your basic bootstrap can specify some basic configuration files as needed (included from /config)
and sets up the routes table that should be used.</description>
        <long-description>&lt;p&gt;Pass a full namespace as a string.&lt;/p&gt;</long-description>
      </docblock>
    </include>
    <class final="false" abstract="false" namespace="global" line="13" package="Default">
      <extends>\BootStrapper</extends>
      <name>SampleBootStrapper</name>
      <full_name>\SampleBootStrapper</full_name>
      <docblock line="9">
        <description>A sample bootstrap implementation.</description>
        <long-description>&lt;p&gt;Set any config files, the routes table, propel configuration, and some other
built-in tools such as ensurePrimaryDomain() and enableHtmlCompression().&lt;/p&gt;</long-description>
      </docblock>
      <property final="false" static="false" visibility="protected" line="18" namespace="global" package="Default">
        <name>$configurationFiles</name>
        <default>array("app-config.php", "env-config.php")</default>
        <docblock line="14">
          <description>Configuration files to use.</description>
          <long-description></long-description>
          <tag line="14" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="27" namespace="global" package="Default">
        <name>$routesTable</name>
        <default>'\sampleProject\RoutesTable'</default>
        <docblock line="23">
          <description>The namespace of the routes table to use</description>
          <long-description></long-description>
          <tag line="23" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="32" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="29">
          <description>Sample constructor for bootstrap.</description>
          <long-description>&lt;p&gt;Includes some custom things we may want.&lt;/p&gt;</long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="50" package="Default">
        <name>includeDependencies</name>
        <full_name>includeDependencies</full_name>
        <docblock line="47">
          <description>Include any dependencies this project may require that's not part of the default set.</description>
          <long-description></long-description>
        </docblock>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file SampleBootStrapper.php</error>
    </parse_markers>
  </file>
  <file path="sampleProject/Controllers/SampleController.php" hash="1e41e521057a20185eb3b64ea811015e" package="Default">
    <docblock line="2">
      <description>A BasePageController implementation.</description>
      <long-description>&lt;p&gt;Very simple supporting only two render methods, home and dynamic.&lt;/p&gt;</long-description>
    </docblock>
    <class final="false" abstract="false" namespace="sampleProject\Controllers" line="13" package="Default">
      <extends>\baseProject\Controllers\BasePageController</extends>
      <name>SampleController</name>
      <full_name>\sampleProject\Controllers\SampleController</full_name>
      <docblock line="10">
        <description>SampleController extends BasePageController.</description>
        <long-description></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="sampleProject\Controllers" line="18" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="15">
          <description>Creates a new controller using the Base/Master as the master view.</description>
          <long-description></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="sampleProject\Controllers" line="25" package="Default">
        <name>home</name>
        <full_name>home</full_name>
        <docblock line="22">
          <description>Home page implementation is simple, just render this sub template.</description>
          <long-description></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="sampleProject\Controllers" line="34" package="Default">
        <name>dynamic</name>
        <full_name>dynamic</full_name>
        <docblock line="29">
          <description>The dynamic page takes whatever the argument was, binds it and renders its sub template.</description>
          <long-description>&lt;p&gt;Normally, we'd want
to use $x for something. We also set it into the SEO for demo purposes.&lt;/p&gt;</long-description>
          <tag line="29" name="param" description="the url argument" type="string" variable="$x">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="34">
          <name>$x</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="sampleProject/RoutesTable.php" hash="094918afca5865736cc19d3a346b8b53" package="Default">
    <docblock line="2">
      <description>A sample routes table that demonstrates extending</description>
      <long-description></long-description>
    </docblock>
    <class final="false" abstract="false" namespace="sampleProject" line="16" package="Default">
      <extends>\baseProject\AbstractRoutesTable</extends>
      <name>RoutesTable</name>
      <full_name>\sampleProject\RoutesTable</full_name>
      <docblock line="12">
        <description>This class supports a couple of additional pages to test some of functionality of baseProject.</description>
        <long-description></long-description>
        <tag line="12" name="see" description="\baseProject\AbstractRoutesTable." refers="\baseProject\AbstractRoutesTable."/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="sampleProject" line="21" package="Default">
        <name>getStaticRoutes</name>
        <full_name>getStaticRoutes</full_name>
        <docblock line="17">
          <description>An implementation of the static routes for sampleProject.</description>
          <long-description></long-description>
          <tag line="17" name="return" description="static routes array" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="sampleProject" line="35" package="Default">
        <name>getDynamicRoutes</name>
        <full_name>getDynamicRoutes</full_name>
        <docblock line="31">
          <description>An implementation of the dynamic routes for sampleProject.</description>
          <long-description></long-description>
          <tag line="31" name="return" description="dynamic routes array" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="sampleProject" line="45" package="Default">
        <name>getAlwaysSupportRoute</name>
        <full_name>getAlwaysSupportRoute</full_name>
        <docblock line="41">
          <description>An implementation of the always support routes for sampleProject.</description>
          <long-description></long-description>
          <tag line="41" name="return" description="an array of routes to always support" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="sampleProject" line="54" package="Default">
        <name>Index</name>
        <full_name>Index</full_name>
        <docblock line="51">
          <description>Index Page, /</description>
          <long-description></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="sampleProject" line="61" package="Default">
        <name>Home</name>
        <full_name>Home</full_name>
        <docblock line="58">
          <description>Home page, /home</description>
          <long-description></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="sampleProject" line="70" package="Default">
        <name>SampleDynamic</name>
        <full_name>SampleDynamic</full_name>
        <docblock line="66">
          <description>Sample Dynamic Page, /dynamic/*</description>
          <long-description></long-description>
          <tag line="66" name="param" description="the value of * in the url" type="mixed" variable="$x">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="70">
          <name>$x</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="sampleProject" line="80" package="Default">
        <name>SampleError</name>
        <full_name>SampleError</full_name>
        <docblock line="75">
          <description>A sample error page.</description>
          <long-description>&lt;p&gt;Throws a 500 with an inner exception. /error&lt;/p&gt;</long-description>
          <tag line="75" name="throws" description="" type="\baseProject\Exceptions\Error500Exception">
            <type by_reference="false">\baseProject\Exceptions\Error500Exception</type>
          </tag>
          <tag line="75" name="throws" description="" type="\Exception">
            <type by_reference="false">\Exception</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="sampleProject" line="92" package="Default">
        <name>SampleGone</name>
        <full_name>SampleGone</full_name>
        <docblock line="88">
          <description>Sample 410 Gone Error page, /gone</description>
          <long-description></long-description>
          <tag line="88" name="throws" description="" type="\baseProject\Exceptions\Error410Exception">
            <type by_reference="false">\baseProject\Exceptions\Error410Exception</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="sampleProject/Views/Base/ErrorPage.tpl.php" hash="84d66debf0257c6154bc807317c9b9d3" package="Default">
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file sampleProject/Views/Base/ErrorPage.tpl.php</error>
    </parse_markers>
  </file>
  <file path="sampleProject/Views/Base/Master.tpl.php" hash="dc9c6821c2e1b4a70cb79a0bd13eb863" package="Default">
    <docblock line="2">
      <description>The main template file.</description>
      <long-description>&lt;p&gt;This is parsed via Savant3.&lt;/p&gt;</long-description>
    </docblock>
  </file>
  <file path="sampleProject/Views/Pages/Errors/403.tpl.php" hash="bcb05bbc94f9ab5b342f11d51aeb752b" package="Default">
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file sampleProject/Views/Pages/Errors/403.tpl.php</error>
    </parse_markers>
  </file>
  <file path="sampleProject/Views/Pages/Errors/404.tpl.php" hash="85d33e7a306eba989a967bbdb4f77975" package="Default">
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file sampleProject/Views/Pages/Errors/404.tpl.php</error>
    </parse_markers>
  </file>
  <file path="sampleProject/Views/Pages/Errors/410.tpl.php" hash="c44aeb749225376944be457c8605c763" package="Default">
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file sampleProject/Views/Pages/Errors/410.tpl.php</error>
    </parse_markers>
  </file>
  <file path="sampleProject/Views/Pages/Errors/500.tpl.php" hash="cd689b81aabd2c053f161ce18d2caca4" package="Default">
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file sampleProject/Views/Pages/Errors/500.tpl.php</error>
    </parse_markers>
  </file>
  <file path="sampleProject/Views/Pages/Home.tpl.php" hash="80514e73e62f58de5123cb38f7b3aa78" package="Default">
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file sampleProject/Views/Pages/Home.tpl.php</error>
    </parse_markers>
  </file>
  <file path="sampleProject/Views/Pages/SampleDynamic.tpl.php" hash="b90c6e72096b95cf18049aa5bb6e5c84" package="Default">
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file sampleProject/Views/Pages/SampleDynamic.tpl.php</error>
    </parse_markers>
  </file>
  <file path="sampleProject/Views/Pages/UnsupportedBrowser.tpl.php" hash="d0c22d7df7923450dde3fb612a78be97" package="Default">
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file sampleProject/Views/Pages/UnsupportedBrowser.tpl.php</error>
    </parse_markers>
  </file>
  <package name="Default" full_name="Default"/>
  <namespace name="baseProject" full_name="baseProject">
    <namespace name="Controllers" full_name="baseProject\Controllers"/>
    <namespace name="Exceptions" full_name="baseProject\Exceptions"/>
    <namespace name="Helpers" full_name="baseProject\Helpers"/>
    <namespace name="Managers" full_name="baseProject\Managers"/>
  </namespace>
  <namespace name="global" full_name="global"/>
  <namespace name="sampleProject" full_name="sampleProject">
    <namespace name="Controllers" full_name="sampleProject\Controllers"/>
  </namespace>
  <marker count="0">todo</marker>
  <marker count="0">fixme</marker>
  <deprecated count="0"/>
</project>
